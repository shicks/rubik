from d3 import *
from cube import *

Cube4 = Cube()

# Corner blocks
FUL = Block('FUL', D3.e0, Cube4)
FUR = Block('FUR', D3.e0, Cube4)
FDL = Block('FDL', D3.e0, Cube4)
FDR = Block('FDR', D3.e0, Cube4)
BUL = Block('BUL', D3.e0, Cube4)
BUR = Block('BUR', D3.e0, Cube4)
BDL = Block('BDL', D3.e0, Cube4)
BDR = Block('BDR', D3.e0, Cube4)

# Edge blocks
FUl = Block('FUl', D3.e0, Cube4)
FUr = Block('FUr', D3.e0, Cube4)
FuL = Block('FuL', D3.e0, Cube4)
FdL = Block('FdL', D3.e0, Cube4)
FuR = Block('FuR', D3.e0, Cube4)
FdR = Block('FdR', D3.e0, Cube4)
FDl = Block('FDl', D3.e0, Cube4)
FDr = Block('FDr', D3.e0, Cube4)
fUL = Block('fUL', D3.e0, Cube4)
fUR = Block('fUR', D3.e0, Cube4)
fDL = Block('fDL', D3.e0, Cube4)
fDR = Block('fDR', D3.e0, Cube4)
bUL = Block('bUL', D3.e0, Cube4)
bUR = Block('bUR', D3.e0, Cube4)
bDL = Block('bDL', D3.e0, Cube4)
bDR = Block('bDR', D3.e0, Cube4)
BUl = Block('BUl', D3.e0, Cube4)
BUr = Block('BUr', D3.e0, Cube4)
BuL = Block('BuL', D3.e0, Cube4)
BdL = Block('BdL', D3.e0, Cube4)
BuR = Block('BuR', D3.e0, Cube4)
BdR = Block('BdR', D3.e0, Cube4)
BDl = Block('BDl', D3.e0, Cube4)
BDr = Block('BDr', D3.e0, Cube4)

# Face blocks
Ful = Block('Ful', D3.e0, Cube4)
Fur = Block('Fur', D3.e0, Cube4)
Fdl = Block('Fdl', D3.e0, Cube4)
Fdr = Block('Fdr', D3.e0, Cube4)
fUl = Block('fUl', D3.e0, Cube4)
fUr = Block('fUr', D3.e0, Cube4)
fDl = Block('fDl', D3.e0, Cube4)
fDr = Block('fDr', D3.e0, Cube4)
fuL = Block('fuL', D3.e0, Cube4)
fuR = Block('fuR', D3.e0, Cube4)
fdL = Block('fdL', D3.e0, Cube4)
fdR = Block('fdR', D3.e0, Cube4)
bUl = Block('bUl', D3.e0, Cube4)
bUr = Block('bUr', D3.e0, Cube4)
bDl = Block('bDl', D3.e0, Cube4)
bDr = Block('bDr', D3.e0, Cube4)
buL = Block('buL', D3.e0, Cube4)
buR = Block('buR', D3.e0, Cube4)
bdL = Block('bdL', D3.e0, Cube4)
bdR = Block('bdR', D3.e0, Cube4)
Bul = Block('Bul', D3.e0, Cube4)
Bur = Block('Bur', D3.e0, Cube4)
Bdl = Block('Bdl', D3.e0, Cube4)
Bdr = Block('Bdr', D3.e0, Cube4)

# Must be defined after all blocks
e = Permutation(Cube4).named('e')

# Operations
Bff = (cycle(FUL, FUR.at(D3.F), FDR, FDL.at(D3.F))
       * cycle(FUl, FuR.at(D3.F), FDr, FdL.at(D3.F))
       * cycle(FUr, FdR.at(D3.F), FDl, FuL.at(D3.F))
       * cycle(Ful, Fur, Fdr, Fdl)).named('Bff')
Bf = (cycle(fUL, fUR.at(D3.F), fDL.at(D3.F))
      * cycle(fUl, fuR, fDr, fdL)
      * cycle(fUr, fdR, fDl, fuL)).named('Bf')
Bb = (cycle(bUL, bUR.at(D3.F), bDR, bDL.at(D3.F))
      * cycle(bUl, buR, bDr, bdL)
      * cycle(bUr, bdR, bDl, buL)).named('Bb')
Bbb = (cycle(BUL, BUR.at(D3.F), BDR, BDL.at(D3.F))
       * cycle(BUl, BuR.at(D3.F), BDr, BdL.at(D3.F))
       * cycle(BUr, BdR.at(D3.F), BDl, BuL.at(D3.F))
       * cycle(Bul, Bur, Bdr, Bdl)).named('Bff')
Fff = Bff.inv().named('Fff')
Ff = Bf.inv().named('Ff')
Fb = Bb.inv().named('Fb')
Fbb = Bbb.inv().named('Fbb')

Urr = (cycle(FUR, BUR.at(D3.L), BDR, FDR.at(D3.L))
       * cycle(fUR, BuR.at(D3.L), bDR, FdR.at(D3.L))
       * cycle(bUR, BdR.at(D3.L), fDR, FuR.at(D3.L))
       * cycle(fuR, buR, bdR, fdR)).named('Urr')
Ur = (cycle(FUr, BUr.at(D3.L), BDr, FDr.at(D3.L))
      * cycle(fUr, Bur, bDr, Fdr)
      * cycle(bUr, Bdr, fDr, Fur)).named('Ur')
Ul = (cycle(FUl, BUl.at(D3.L), BDl, FDl.at(D3.L))
      * cycle(fUl, Bul, bDl, Fdl)
      * cycle(bUl, Bdl, fDl, Ful)).named('Ul')
Ull = (cycle(FUL, BUL.at(D3.L), BDL, FDL.at(D3.L))
       * cycle(fUL, BuL.at(D3.L), bDL, FdL.at(D3.L))
       * cycle(bUL, BdL.at(D3.L), fDL, FuL.at(D3.L))
       * cycle(fuL, buL, bdL, fdL)).named('Ull')
Drr = Urr.inv().named('Drr')
Dr = Ur.inv().named('Dr')
Dl = Ul.inv().named('Dl')
Dll = Ull.inv().named('Dll')

Ruu = (cycle(FUL, FUR.at(D3.U), BUR, BUL.at(D3.U))
       * cycle(FUl, fUR.at(D3.U), BUr, bUL.at(D3.U))
       * cycle(FUr, bUR.at(D3.U), BUl, fUL.at(D3.U))
       * cycle(fUl, fUr, bUr, bUl)).named('Ruu')
Ru = (cycle(FuL, FuR.at(D3.U), BuR, BuL.at(D3.U))
      * cycle(Ful, fuR, Bur, buL)
      * cycle(Fur, buR, Bul, fuL)).named('Ru')
Rd = (cycle(FdL, FdR.at(D3.U), BdR, BdL.at(D3.U))
      * cycle(Fdl, fdR, Bdr, bdL)
      * cycle(Fdr, bdR, Bdl, fdL)).named('Rd')
Rdd = (cycle(FDL, FDR.at(D3.U), BDR, BDL.at(D3.U))
       * cycle(FDl, fDR.at(D3.U), BDr, bDL.at(D3.U))
       * cycle(FDr, bDR.at(D3.U), BDl, fDL.at(D3.U))
       * cycle(fDl, fDr, bDr, bDl)).named('Rdd')
Luu = Ruu.inv().named('Luu')
Lu = Ru.inv().named('Lu')
Ld = Rd.inv().named('Ld')
Ldd = Rdd.inv().named('Ldd')

OF = (Fff*Ff*Fb*Fbb).named('OF')
OU = (Ruu*Ru*Rd*Rdd).named('OU')
OR = (Drr*Dr*Dl*Dll).named('OR')
OB = (OF.inv()).named('OB')
OD = (OU.inv()).named('OD')
OL = (OR.inv()).named('OL')

# Additional permutations

seven = cat(Drr, Rdd, Urr, Rdd, Bff, Ldd, Fff)
sevenI = seven.inv()
Ur1R = cat(Ur, Ruu, Dr, Ruu**2, Ur, Ruu, Dr)
Ur1L = cat(Ur, Luu, Dr, Luu**2, Ur, Luu, Dr)
Ul1R = cat(Ul, Ruu, Dl, Ruu**2, Ul, Ruu, Dl)
Ul1L = cat(Ul, Luu, Dl, Luu**2, Ul, Luu, Dl)

Ur2R = cat(Ur, Ruu, Dr, Ruu, Ur, Ruu**2, Dr)
Ur2L = cat(Ur, Luu, Dr, Luu, Ur, Luu**2, Dr)
Ul2R = cat(Ul, Ruu, Dl, Ruu, Ul, Ruu**2, Dl)
Ul2L = cat(Ul, Luu, Dl, Luu, Ul, Luu**2, Dl)

Ur3R = cat(Ur, Ruu**2, Dr, Ruu, Ur, Ruu, Dr)
Ur3L = cat(Ur, Luu**2, Dr, Luu, Ur, Luu, Dr)
Ul3R = cat(Ul, Ruu**2, Dl, Ruu, Ul, Ruu, Dl)
Ul3L = cat(Ul, Luu**2, Dl, Luu, Ul, Luu, Dl)
